version: "3.8"

services:
  # ===================== Infrastructure (internal only) =====================
  mongo:
    image: mongo:6.0-jammy        # jammy c√≥ s·∫µn 'mongosh'
    container_name: mongo
    restart: unless-stopped
    volumes:
      - mongo_data:/data/db
    expose:
      - "27017"                   # ch·ªâ n·ªôi b·ªô
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval \"db.adminCommand({ ping: 1 })\" || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    restart: unless-stopped
    expose:
      - "5672"                    # AMQP internal
      - "15672"                   # UI internal (kh√¥ng public ra host)
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # ===================== Application Services =====================
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: unless-stopped
    environment:
      - PORT=3003
    ports:
      - "3003:3003"               # üëà ch·ªâ public gateway
    depends_on:
      auth:
        condition: service_healthy
      product:
        condition: service_healthy
      order:
        condition: service_healthy
    healthcheck:
      # n·∫øu app c√≥ /health th√¨ thay URL cho chu·∫©n h∆°n
      test: ["CMD-SHELL", "wget -qO- http://localhost:3003 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - backend

  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    container_name: auth
    restart: unless-stopped
    environment:
      - PORT=3000
      - JWT_SECRET=mysecretkey
      - MONGODB_AUTH_URI=mongodb://mongo:27017/authdb
    expose:
      - "3000"                    # ch·ªâ n·ªôi b·ªô
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 3000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - backend

  product:
    build:
      context: ./product
    container_name: product
    restart: unless-stopped
    environment:
      - PORT=3001
      - JWT_SECRET=mysecretkey
      - MONGODB_PRODUCT_URI=mongodb://mongo:27017/productdb
      # N·∫øu code d√πng t√™n bi·∫øn kh√°c cho AMQP th√¨ gi·ªØ c·∫£ hai ƒë·ªÉ an to√†n
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - AMQP_URL=amqp://rabbitmq:5672
    expose:
      - "3001"                    # ch·ªâ n·ªôi b·ªô
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 3001 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - backend

  order:
    build:
      context: ./order
    container_name: order
    restart: unless-stopped
    environment:
      - PORT=3002
      - JWT_SECRET=mysecretkey
      - MONGODB_ORDER_URI=mongodb://mongo:27017/orderdb
      # n·∫øu code tham chi·∫øu ch√©o, ƒë·ªÉ s·∫µn cho ti·ªán
      - MONGODB_PRODUCT_URI=mongodb://mongo:27017/productdb
      - MONGODB_AUTH_URI=mongodb://mongo:27017/authdb
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - AMQP_URL=amqp://rabbitmq:5672
    expose:
      - "3002"                    # ch·ªâ n·ªôi b·ªô
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 3002 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - backend

# ===================== Volumes & Networks =====================
volumes:
  mongo_data:

networks:
  backend:
    driver: bridge
